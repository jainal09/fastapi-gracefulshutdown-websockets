[tool.poetry]
name = "api"
version = "0.1.0"
description = ""
authors = ["Jainal Gosaliya <jainal09gosalia@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.110.0"
sqlalchemy = "^2.0.28"
uvicorn = {extras = ["standard"], version = "^0.28.0"}


[tool.poetry.group.dev.dependencies]
isort = "^5.13.2"
autoflake = "^2.3.1"
black = "^24.3.0"
mypy = "^1.9.0"
ruff = "^0.3.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "src/grpc_generated",
]

src = ["src", "tests"]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I001",  # isort
  "C",  # flake8-comprehensions
  "B",  # flake8-bugbear
  "UP", # pyupgrade
  "A",  # autoflake
]
ignore = [
    "E501",  # line too long, handled by black]
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


# profile = "black"
# multi_line_output = 3
# include_trailing_comma = true
# force_grid_wrap = 0
# force_single_line = true
# line_length = 88
# skip_glob = [".venv/*", "src/rpcs/grpc_gen/*"]
# verbose = false


[tool.mypy]
plugins = ["pydantic.mypy"]
follow_imports = "silent"
# 3rd party import
ignore_missing_imports = true
# dynamic typing
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = true
disallow_any_generics = false
disallow_subclassing_any = true
# platform
python_version = "3.10"
# untyped
disallow_untyped_calls = true
disallow_untyped_defs = true
show_traceback = true
explicit_package_bases = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false
# None and Optional
no_implicit_optional = true
# Warnings
warn_return_any = false
warn_unreachable = true
# Misc
pretty = true
exclude = [".venv", "src/grpc_generated"]